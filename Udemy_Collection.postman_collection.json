{
	"info": {
		"_postman_id": "c56cc8d5-2277-4459-bfbc-c796f756aad1",
		"name": "Udemy_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "12 tests swapi Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check that we have all declared fields\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"//3. Field value isn't NULL\r",
							"pm.test(\"Check if value isn't NULL\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.vehiclese).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"\r",
							"//4. Check if value isn't empty \r",
							"pm.test(\"Check if value isn't empty\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehiclese).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"\r",
							"//5. Check if field corresponds to a specific value\r",
							" pm.test(\"Check if field corresponds to a specific value\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"});\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the responce\r",
							"pm.test(\"There is a specific header in the responce\", function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"}); \r",
							"\r",
							"//10. The response has a specific header with a specifical value\r",
							"pm.test(\"The response has a specific header with a specifical value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"Cookie exists\", function(){\r",
							"    pm.cookies.has(\"_ga\")\r",
							"});    \r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function(){\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"_ga\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e) { \r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"        }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiny Validator JSON 1 part",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //specify requires properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"};\r",
							"pm.test('Body is correct', function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Tiny Validator JSON  2 part",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //specify requires properties\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"            },\r",
							"            \"species\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\":{\"type\": \"string\"}\r",
							"                },\r",
							"            \"vehicles\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\":{\"type\": \"string\"}\r",
							"                },\r",
							"            \"starships\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\":{\"type\": \"string\"}\r",
							"                },    \r",
							"        \r",
							"    }\r",
							"};\r",
							"pm.test('Body is correct', function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"6b4e7a74-7976-4386-b3d5-3db216eaa967",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"6b4e7a74-7976-4386-b3d5-3db216eaa967",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 12 Nov 2021 23:04:32 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=3fdf3413d0976d87"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=6cca5304dbe3ac87"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1636758332"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"sucsess\"\n        \n    }\n}"
				},
				{
					"name": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Viktor\"};\r\n"
						},
						"url": {
							"raw": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"6b4e7a74-7976-4386-b3d5-3db216eaa967",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 12 Nov 2021 23:09:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=3fdf3413d0976d87"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=6cca5304dbe3ac87"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1636758332"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Viktor\",\n        \"status\": \"creasted\",\n        \"message\": \"sucsess\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Viktor\"}"
				},
				"url": {
					"raw": "https://6b4e7a74-7976-4386-b3d5-3db216eaa967.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"6b4e7a74-7976-4386-b3d5-3db216eaa967",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": []
		}
	]
}